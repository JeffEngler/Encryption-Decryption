package encryptdecrypt;
 
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
/*
* This command line program takes in data as either a file or a string and writes the encrypted or decrypted data
* to a file or the command line. There are two encryption algorithms. "unicode" shifts all characters
* by the designated key, and "shift" only shifts english letters.
* Command line arguments:
*       -mode   "enc" for encrypt or "dec" for decrypt
*       -data   the string to be encrypted or decrypted
*       -alg    selects algorithm. Either "shift" or "unicode"
*       -in     the file to be encrypted or decrypted
*       -out    the file to write the results too
*       -key    integer value that determines how for charachters ore shifted
*
* If an input file and string are both given, the string will be processed and the file will be ignored.
* If no output file in given, output will be written to the command line.
* arguments can be given in any order.
*
* Example input: java Main -mode enc -key 5 -data "Hello world!" -alg unicode
* Example Output: Mjqqt%|twqi&
 */
public class Main {
    public static void main(String[] args) throws IOException {
        String mode = "enc";                                    // assigning default values
        String data = "";
        String alg = "shift";
        boolean noData = true;
        boolean isOut = false;
        String outFile = "";
        int key = 0;
 
        for (int i = 0; i < args.length; i += 2) {              // parse input
            if (args[i].equals("-mode")) {
                mode = args[i + 1];
            } else if (args[i].equals("-key")) {
                key = Integer.parseInt(args[i + 1]);
            } else if (args[i].equals("-alg")) {
                alg = args[i + 1];
            } else if (args[i].equals("-data")) {
                data = args[i + 1];
                noData = false;
            } else if (args[i].equals("-in") && noData) {      //if input file is given and no data string has been read
                File inFile = new File(args[i + 1]);           // open file
                try (Scanner scanner = new Scanner(inFile)) {  // read, then close file
                    while (scanner.hasNext()) {
                        data += scanner.nextLine();
                    }
                } catch (FileNotFoundException e) {
                }
            } else if (args[i].equals("-out")) {
                outFile = args[i + 1];
                isOut = true;
            }
        }
        if (alg.equals(("shift"))) {
            if (mode.equals("enc")) {                               //  encryption mode
                if (isOut) {
                    writeFile(outFile, shiftEncrypt(data, key));
                } else {
                    System.out.print(shiftEncrypt(data, key));
                }
            } else {                                                //  decryption mode
                if (isOut) {
                    writeFile(outFile, shiftDecrypt(data, key));
                } else {
                    System.out.print(shiftDecrypt(data, key));
                }
            }
        }
 
        if (alg.equals(("unicode"))) {
            if (mode.equals("enc")) {                               //  encryption mode
                if (isOut) {
                    writeFile(outFile, unicodeEncrypt(data, key));
                } else {
                    System.out.print(unicodeEncrypt(data, key));
                }
            } else {                                                //  decryption mode
                if (isOut) {
                    writeFile(outFile, unicodeDecrypt(data, key));
                } else {
                    System.out.print(unicodeDecrypt(data, key));
                }
            }
        }
    }
 
    // Takes a string and an integer key. Returns an encrypted string.
    private static StringBuffer shiftEncrypt(String data, int key) {
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < data.length(); i++) {
            if (Character.isUpperCase(data.charAt(i))) {
                char ch = (char)(((int)data.charAt(i) +
                        key - 65) % 26 + 65);
                result.append(ch);
            } else if (Character.isLowerCase(data.charAt(i))){
                char ch = (char)(((int)data.charAt(i) +
                        key - 97) % 26 + 97);
                result.append(ch);
            } else {
                result.append(data.charAt(i));
            }
        }
        return result;
    }
    // Takes an encrypted string and an integer key. Returns a decrypted string.
    private static StringBuffer shiftDecrypt(String data, int key) {
        key = 26 -key;
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < data.length(); i++) {
            if (Character.isUpperCase(data.charAt(i))) {
                char ch = (char)(((int)data.charAt(i) +
                        key - 65) % 26 + 65);
                result.append(ch);
            } else if (Character.isLowerCase(data.charAt(i))){
                char ch = (char)(((int)data.charAt(i) +
                        key - 97) % 26 + 97);
                result.append(ch);
            } else {
                result.append(data.charAt(i));
            }
        }
        return result;
    }
 
    //  Writes the given data to the given file
    private static void writeFile(String outFile, StringBuffer data) throws IOException {
        File file = new File(outFile);
        FileWriter fileWriter = new FileWriter(file);
        fileWriter.write(String.valueOf(data));
        fileWriter.close();
        ;
    }
 
    // Takes a string and an integer key. Returns an encrypted string.
    public static StringBuffer unicodeEncrypt(String data, int key) {
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < data.length(); i++) {
            char ch = (char)(((int)data.charAt(i) + key));
            result.append(ch);
        }
        return result;
    }
    
    // Takes an encrypted string and an integer key. Returns a decrypted string.
    public static StringBuffer unicodeDecrypt(String data, int key) {
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < data.length(); i++) {
            char ch = (char)(((int)data.charAt(i) - key));
            result.append(ch);
        }
        return result;
    }
}
